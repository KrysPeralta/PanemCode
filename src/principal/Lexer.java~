/* The following code was generated by JFlex 1.4.3 on 24/11/23 23:47 */

package principal;

import compilerTools.Token;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/11/23 23:47 from the specification file
 * <tt>C:/Users/kryst/Documents/NetBeans_Java/PanemCode1/src/principal/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\11\1\0\2\3\22\0\1\30\1\55\1\4\1\10"+
    "\1\0\1\60\1\57\1\0\1\62\1\63\1\37\1\36\1\70\1\7"+
    "\1\5\1\40\12\2\1\34\1\0\1\54\1\52\1\6\1\0\1\0"+
    "\1\56\1\1\1\44\1\47\1\46\3\1\1\42\4\1\1\43\1\50"+
    "\2\1\1\45\1\1\1\51\6\1\1\66\1\0\1\67\1\41\1\61"+
    "\1\0\1\17\1\32\1\25\1\33\1\15\1\16\1\1\1\31\1\24"+
    "\1\1\1\35\1\20\1\1\1\23\1\26\1\22\1\1\1\13\1\21"+
    "\1\12\1\14\1\1\1\27\3\1\1\64\1\53\1\65\43\0\1\0"+
    "\35\0\1\0\uff40\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\10\2\1\1\1\7\1\10\1\11\1\12\4\2\1\5"+
    "\1\4\1\5\1\1\1\2\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\4\0\1\23\1\3\1\0"+
    "\1\24\14\2\1\25\3\2\1\26\2\0\1\27\1\2"+
    "\1\30\1\0\7\2\1\31\6\2\1\32\1\33\1\34"+
    "\2\0\1\35\1\36\12\2\2\0\4\2\1\37\1\40"+
    "\1\2\1\41\1\4\1\42\2\2\1\0\1\2\2\0"+
    "\1\2\1\0\1\43\1\44\1\0\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\71\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u0390\0\u0390\0\u0390\0\u03c9\0\u0402\0\u043b"+
    "\0\u0474\0\71\0\u04ad\0\u04e6\0\u011d\0\u051f\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\u0558\0\u0591"+
    "\0\u05ca\0\344\0\71\0\u0603\0\u063c\0\71\0\u0675\0\u06ae"+
    "\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876"+
    "\0\u08af\0\u08e8\0\71\0\u0921\0\u095a\0\u0993\0\162\0\u09cc"+
    "\0\u0a05\0\71\0\u0a3e\0\u0591\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\162\0\u0c3f\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0d23\0\u0d5c\0\162\0\162\0\162\0\u0d95\0\u0dce"+
    "\0\162\0\162\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec"+
    "\0\u1125\0\u115e\0\71\0\162\0\u1197\0\162\0\u0a77\0\162"+
    "\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f"+
    "\0\71\0\162\0\u1398\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\2\1\5\1\11\1\12\1\13\1\14\1\15\2\3"+
    "\1\16\1\17\2\3\1\20\2\3\1\5\3\3\1\21"+
    "\1\3\1\22\1\23\1\24\1\25\1\26\1\27\1\3"+
    "\1\30\2\3\1\31\1\3\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\2\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\2\72\0\2\3\7\0\16\3\1\0"+
    "\3\3\1\0\1\3\4\0\10\3\4\0\1\3\2\0"+
    "\1\47\11\0\1\4\2\0\1\50\46\0\1\51\14\0"+
    "\4\52\1\53\64\52\52\0\1\32\20\0\1\54\4\0"+
    "\1\55\43\0\1\56\16\0\2\3\7\0\1\3\1\57"+
    "\14\3\1\0\3\3\1\0\1\3\4\0\10\3\4\0"+
    "\1\3\2\0\1\47\10\0\2\3\7\0\3\3\1\60"+
    "\12\3\1\0\3\3\1\0\1\3\4\0\10\3\4\0"+
    "\1\3\2\0\1\47\10\0\2\3\7\0\11\3\1\61"+
    "\4\3\1\0\3\3\1\0\1\3\4\0\10\3\4\0"+
    "\1\3\2\0\1\47\10\0\2\3\7\0\7\3\1\62"+
    "\6\3\1\0\3\3\1\0\1\3\4\0\10\3\4\0"+
    "\1\3\2\0\1\47\10\0\2\3\7\0\5\3\1\63"+
    "\3\3\1\64\4\3\1\0\3\3\1\0\1\3\4\0"+
    "\10\3\4\0\1\3\2\0\1\47\10\0\2\3\7\0"+
    "\15\3\1\65\1\0\1\66\2\3\1\0\1\3\4\0"+
    "\10\3\4\0\1\3\2\0\1\47\10\0\2\3\7\0"+
    "\1\3\1\67\12\3\1\70\1\3\1\0\3\3\1\0"+
    "\1\3\4\0\10\3\4\0\1\3\2\0\1\47\10\0"+
    "\2\3\7\0\6\3\1\71\7\3\1\0\1\72\2\3"+
    "\1\0\1\3\4\0\10\3\4\0\1\3\2\0\1\47"+
    "\61\0\1\73\71\0\1\56\16\0\2\3\7\0\16\3"+
    "\1\0\3\3\1\0\1\3\4\0\1\3\1\74\6\3"+
    "\4\0\1\3\2\0\1\47\10\0\2\3\7\0\16\3"+
    "\1\0\3\3\1\0\1\3\4\0\6\3\1\75\1\3"+
    "\4\0\1\3\2\0\1\47\10\0\2\3\7\0\16\3"+
    "\1\0\3\3\1\0\1\3\4\0\4\3\1\76\3\3"+
    "\4\0\1\3\2\0\1\47\10\0\2\3\7\0\16\3"+
    "\1\0\3\3\1\0\1\3\4\0\3\3\1\77\4\3"+
    "\4\0\1\3\2\0\1\47\62\0\1\37\17\0\1\100"+
    "\1\0\1\101\1\0\1\102\43\0\1\32\17\0\2\3"+
    "\7\0\16\3\1\0\3\3\1\0\1\3\4\0\1\3"+
    "\1\103\6\3\4\0\1\3\2\0\1\47\10\0\1\3"+
    "\10\0\16\3\1\0\3\3\1\0\1\3\4\0\10\3"+
    "\4\0\1\3\14\0\1\104\74\0\1\102\64\0\1\54"+
    "\76\0\1\105\61\0\2\3\7\0\2\3\1\106\13\3"+
    "\1\0\3\3\1\0\1\3\4\0\10\3\4\0\1\3"+
    "\2\0\1\47\10\0\2\3\7\0\5\3\1\107\2\3"+
    "\1\110\5\3\1\0\3\3\1\0\1\3\4\0\10\3"+
    "\4\0\1\3\2\0\1\47\10\0\2\3\7\0\1\111"+
    "\5\3\1\112\7\3\1\0\3\3\1\0\1\3\4\0"+
    "\10\3\4\0\1\3\2\0\1\47\10\0\2\3\7\0"+
    "\1\113\15\3\1\0\3\3\1\0\1\3\4\0\10\3"+
    "\4\0\1\3\2\0\1\47\10\0\2\3\7\0\6\3"+
    "\1\114\7\3\1\0\3\3\1\0\1\3\4\0\10\3"+
    "\4\0\1\3\2\0\1\47\10\0\2\3\7\0\13\3"+
    "\1\115\2\3\1\0\3\3\1\0\1\3\4\0\10\3"+
    "\4\0\1\3\2\0\1\47\10\0\2\3\7\0\12\3"+
    "\1\116\3\3\1\0\3\3\1\0\1\3\4\0\10\3"+
    "\4\0\1\3\2\0\1\47\10\0\2\3\7\0\14\3"+
    "\1\117\1\3\1\0\3\3\1\0\1\3\4\0\10\3"+
    "\4\0\1\3\2\0\1\47\10\0\2\3\7\0\14\3"+
    "\1\120\1\3\1\0\3\3\1\0\1\3\4\0\10\3"+
    "\4\0\1\3\2\0\1\47\10\0\2\3\7\0\15\3"+
    "\1\121\1\0\3\3\1\0\1\3\4\0\10\3\4\0"+
    "\1\3\2\0\1\47\10\0\2\3\7\0\5\3\1\122"+
    "\10\3\1\0\3\3\1\0\1\3\4\0\10\3\4\0"+
    "\1\3\2\0\1\47\10\0\2\3\7\0\3\3\1\123"+
    "\12\3\1\0\3\3\1\0\1\3\4\0\10\3\4\0"+
    "\1\3\2\0\1\47\10\0\2\3\7\0\16\3\1\0"+
    "\3\3\1\0\1\3\4\0\2\3\1\124\5\3\4\0"+
    "\1\3\2\0\1\47\10\0\2\3\7\0\16\3\1\0"+
    "\3\3\1\0\1\3\4\0\7\3\1\125\4\0\1\3"+
    "\2\0\1\47\10\0\2\3\7\0\16\3\1\0\3\3"+
    "\1\0\1\3\4\0\5\3\1\126\2\3\4\0\1\3"+
    "\2\0\1\47\11\0\1\100\3\0\1\102\62\0\4\101"+
    "\1\127\64\101\1\0\2\3\7\0\16\3\1\0\3\3"+
    "\1\0\1\3\4\0\5\3\1\77\2\3\4\0\1\3"+
    "\2\0\1\47\7\0\7\105\1\130\1\105\1\0\57\105"+
    "\1\0\2\3\7\0\3\3\1\131\12\3\1\0\3\3"+
    "\1\0\1\3\4\0\10\3\4\0\1\3\2\0\1\47"+
    "\10\0\2\3\7\0\16\3\1\0\2\3\1\132\1\0"+
    "\1\3\4\0\10\3\4\0\1\3\2\0\1\47\10\0"+
    "\2\3\7\0\3\3\1\133\12\3\1\0\3\3\1\0"+
    "\1\3\4\0\10\3\4\0\1\3\2\0\1\47\10\0"+
    "\2\3\7\0\12\3\1\134\3\3\1\0\3\3\1\0"+
    "\1\3\4\0\10\3\4\0\1\3\2\0\1\47\10\0"+
    "\2\3\7\0\12\3\1\135\3\3\1\0\3\3\1\0"+
    "\1\3\4\0\10\3\4\0\1\3\2\0\1\47\10\0"+
    "\2\3\7\0\5\3\1\136\10\3\1\0\3\3\1\0"+
    "\1\3\4\0\10\3\4\0\1\3\2\0\1\47\10\0"+
    "\2\3\7\0\7\3\1\106\6\3\1\0\3\3\1\0"+
    "\1\3\4\0\10\3\4\0\1\3\2\0\1\47\10\0"+
    "\2\3\7\0\1\137\15\3\1\0\3\3\1\0\1\3"+
    "\4\0\10\3\4\0\1\3\2\0\1\47\10\0\2\3"+
    "\7\0\15\3\1\140\1\0\3\3\1\0\1\3\4\0"+
    "\10\3\4\0\1\3\2\0\1\47\10\0\2\3\7\0"+
    "\16\3\1\0\1\3\1\141\1\3\1\0\1\3\4\0"+
    "\10\3\4\0\1\3\2\0\1\47\10\0\2\3\7\0"+
    "\3\3\1\142\12\3\1\0\3\3\1\0\1\3\4\0"+
    "\10\3\4\0\1\3\2\0\1\47\10\0\2\3\7\0"+
    "\7\3\1\143\6\3\1\0\3\3\1\0\1\3\4\0"+
    "\10\3\4\0\1\3\2\0\1\47\10\0\2\3\7\0"+
    "\13\3\1\144\2\3\1\0\3\3\1\0\1\3\4\0"+
    "\10\3\4\0\1\3\2\0\1\47\13\0\1\101\1\0"+
    "\1\102\61\0\1\145\7\105\1\146\1\105\1\0\57\105"+
    "\1\0\2\3\7\0\5\3\1\147\10\3\1\0\3\3"+
    "\1\0\1\3\4\0\10\3\4\0\1\3\2\0\1\47"+
    "\10\0\2\3\7\0\6\3\1\115\7\3\1\0\3\3"+
    "\1\0\1\3\4\0\10\3\4\0\1\3\2\0\1\47"+
    "\10\0\2\3\7\0\16\3\1\0\3\3\1\0\1\150"+
    "\4\0\10\3\4\0\1\3\2\0\1\47\10\0\2\3"+
    "\7\0\16\3\1\0\1\3\1\151\1\3\1\0\1\3"+
    "\4\0\10\3\4\0\1\3\2\0\1\47\10\0\2\3"+
    "\7\0\13\3\1\152\2\3\1\0\3\3\1\0\1\3"+
    "\4\0\10\3\4\0\1\3\2\0\1\47\10\0\2\3"+
    "\7\0\16\3\1\0\3\3\1\153\1\3\4\0\10\3"+
    "\4\0\1\3\2\0\1\47\10\0\2\3\7\0\3\3"+
    "\1\154\12\3\1\0\3\3\1\0\1\3\4\0\10\3"+
    "\4\0\1\3\2\0\1\47\10\0\2\3\7\0\1\3"+
    "\1\155\14\3\1\0\3\3\1\0\1\3\4\0\10\3"+
    "\4\0\1\3\2\0\1\47\10\0\2\3\7\0\7\3"+
    "\1\115\6\3\1\0\3\3\1\0\1\3\4\0\10\3"+
    "\4\0\1\3\2\0\1\47\10\0\2\3\7\0\16\3"+
    "\1\0\3\3\1\0\1\156\4\0\10\3\4\0\1\3"+
    "\2\0\1\47\13\0\1\101\23\0\1\145\40\0\7\105"+
    "\1\146\1\157\1\0\57\105\1\0\2\3\7\0\1\115"+
    "\15\3\1\0\3\3\1\0\1\3\4\0\10\3\4\0"+
    "\1\3\2\0\1\47\10\0\2\3\7\0\3\3\1\160"+
    "\12\3\1\0\3\3\1\0\1\3\4\0\10\3\4\0"+
    "\1\3\2\0\1\47\10\0\2\3\7\0\6\3\1\161"+
    "\7\3\1\0\3\3\1\0\1\3\4\0\10\3\4\0"+
    "\1\3\2\0\1\47\10\0\2\3\7\0\16\3\1\0"+
    "\1\162\2\3\1\0\1\3\4\0\10\3\4\0\1\3"+
    "\2\0\1\47\10\0\2\3\7\0\16\3\1\163\3\3"+
    "\1\0\1\3\4\0\10\3\4\0\1\3\2\0\1\47"+
    "\10\0\2\3\7\0\12\3\1\164\3\3\1\0\3\3"+
    "\1\0\1\3\4\0\10\3\4\0\1\3\2\0\1\47"+
    "\10\0\2\3\7\0\16\3\1\165\3\3\1\0\1\3"+
    "\4\0\10\3\4\0\1\3\2\0\1\47\35\0\1\166"+
    "\43\0\2\3\7\0\7\3\1\167\6\3\1\0\3\3"+
    "\1\0\1\3\4\0\10\3\4\0\1\3\2\0\1\47"+
    "\35\0\1\170\65\0\1\171\46\0\2\3\7\0\16\3"+
    "\1\0\1\172\2\3\1\0\1\3\4\0\10\3\4\0"+
    "\1\3\2\0\1\47\23\0\1\173\66\0\1\174\56\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5073];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\24\1\1\11\4\1\10\11"+
    "\4\0\1\11\1\1\1\0\1\11\14\1\1\11\4\1"+
    "\2\0\1\11\2\1\1\0\21\1\2\0\14\1\2\0"+
    "\4\1\1\11\7\1\1\0\1\1\2\0\1\1\1\0"+
    "\1\11\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Token token(String lexeme, String lexicalComp, int line, int column){
        return new Token(lexeme, lexicalComp, line+1, column+1);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { return token(yytext(), "CORCERRAR", yyline, yycolumn);
          }
        case 38: break;
        case 21: 
          { return token(yytext(), "OPASIGNACION", yyline, yycolumn);
          }
        case 39: break;
        case 34: 
          { return token(yytext(), "PRUNLIKE", yyline, yycolumn);
          }
        case 40: break;
        case 27: 
          { return token(yytext(), "OPINVERSION", yyline, yycolumn);
          }
        case 41: break;
        case 10: 
          { return token(yytext(), "OPPOTENCIA", yyline, yycolumn);
          }
        case 42: break;
        case 33: 
          { return token(yytext(), "PRCHECK", yyline, yycolumn);
          }
        case 43: break;
        case 9: 
          { return token(yytext(), "OPDIVISION", yyline, yycolumn);
          }
        case 44: break;
        case 24: 
          { return token(yytext(), "DECIMAL", yyline, yycolumn);
          }
        case 45: break;
        case 32: 
          { return token(yytext(), "PRPROBE", yyline, yycolumn);
          }
        case 46: break;
        case 11: 
          { return token(yytext(), "OPCOMPARACION", yyline, yycolumn);
          }
        case 47: break;
        case 31: 
          { return token(yytext(), "PRMOSTRAR", yyline, yycolumn);
          }
        case 48: break;
        case 13: 
          { return token(yytext(), "PARENABRIR", yyline, yycolumn);
          }
        case 49: break;
        case 7: 
          { return token(yytext(), "OPSUMA", yyline, yycolumn);
          }
        case 50: break;
        case 35: 
          { return token(yytext(), "PRINICIO", yyline, yycolumn);
          }
        case 51: break;
        case 20: 
          { return token(yytext(), "OPCOMBINADO", yyline, yycolumn);
          }
        case 52: break;
        case 3: 
          { return token(yytext(), "ENTERO", yyline, yycolumn);
          }
        case 53: break;
        case 29: 
          { return token(yytext(), "BOOLEANO", yyline, yycolumn);
          }
        case 54: break;
        case 28: 
          { return token(yytext(), "OPDECREMENTO", yyline, yycolumn);
          }
        case 55: break;
        case 37: 
          { return token(yytext(), "PRFIN", yyline, yycolumn);
          }
        case 56: break;
        case 15: 
          { return token(yytext(), "LLAVEABRIR", yyline, yycolumn);
          }
        case 57: break;
        case 23: 
          { return token(yytext(), "ARREGLO", yyline, yycolumn);
          }
        case 58: break;
        case 6: 
          { return token(yytext(), "OPRESTA", yyline, yycolumn);
          }
        case 59: break;
        case 5: 
          { return token(yytext(), "OPRELACIONAL", yyline, yycolumn);
          }
        case 60: break;
        case 25: 
          { return token(yytext(), "RESERVADAS", yyline, yycolumn);
          }
        case 61: break;
        case 16: 
          { return token(yytext(), "LLAVECERRAR", yyline, yycolumn);
          }
        case 62: break;
        case 8: 
          { return token(yytext(), "OPMULTIPLICACION", yyline, yycolumn);
          }
        case 63: break;
        case 2: 
          { return token(yytext(), "VARIABLE", yyline, yycolumn);
          }
        case 64: break;
        case 17: 
          { return token(yytext(), "CORABRIR", yyline, yycolumn);
          }
        case 65: break;
        case 19: 
          { return token(yytext(), "TEXTO", yyline, yycolumn);
          }
        case 66: break;
        case 12: 
          { return token(yytext(), "OPCONCATENACION", yyline, yycolumn);
          }
        case 67: break;
        case 30: 
          { return token(yytext(), "PRLEER", yyline, yycolumn);
          }
        case 68: break;
        case 26: 
          { return token(yytext(), "OPINCREMENTO", yyline, yycolumn);
          }
        case 69: break;
        case 36: 
          { return token(yytext(), "PRDECLARAR", yyline, yycolumn);
          }
        case 70: break;
        case 1: 
          { return token(yytext(), "ERROR", yyline, yycolumn);
          }
        case 71: break;
        case 22: 
          { return token(yytext(), "OPLOGICO", yyline, yycolumn);
          }
        case 72: break;
        case 4: 
          { /*Ignore*/
          }
        case 73: break;
        case 14: 
          { return token(yytext(), "PARENCERRAR", yyline, yycolumn);
          }
        case 74: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
